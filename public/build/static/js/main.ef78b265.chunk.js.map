{"version":3,"sources":["components/InputTodo.js","components/TodoItem.js","components/TodoList.js","actions/getTodosAction.js","actions/deleteTodoAction.js","actions/addTodoAction.js","actions/updateTodoAction.js","App.js","reducers/rootReducer.js","serviceWorker.js","index.js"],"names":["InputTodo","addTodo","currentMaxId","useState","inputText","setInput","className","type","value","onChange","event","target","onClick","length","alert","id","text","done","TodoItem","todo","updateTodo","deleteTodo","parseInt","checked","connect","state","todos","dispatch","getTodos","a","fetch","headers","fetchResult","json","data","Math","max","map","deleteTodoById","method","deleteTodoAction","newTodo","body","JSON","stringify","updateNeeded","useEffect","key","App","initState","updating","rootReducer","action","tempTodos","filter","Boolean","window","location","hostname","match","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ef78b265.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\nfunction InputTodo({addTodo, currentMaxId}) {\r\n  const [inputText, setInput] = useState('');\r\n  \r\n  const handleInputSubmit = () => {\r\n    if(inputText.length <= 3){\r\n      alert('Inputed value must be longer than 3 characters!')\r\n    }else {\r\n      const newTodo = {\r\n        id: currentMaxId + 1,\r\n        text: inputText,\r\n        done: false\r\n      }\r\n      addTodo(newTodo);\r\n      setInput('');\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"input-area\">\r\n      <input \r\n        type=\"text\" \r\n        value={inputText}\r\n        onChange={(event) => setInput(event.target.value)} \r\n      />\r\n      <button \r\n        className=\"button-text\"\r\n        type = 'submit'\r\n        onClick = {handleInputSubmit} > ADD \r\n      </button> \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default InputTodo;","import React from 'react';\r\n\r\nfunction TodoItem({todo, updateTodo, deleteTodo}) {\r\n  const handleUpdate = (event) => {\r\n    updateTodo({\r\n      ...todo, \r\n      done: event.target.checked\r\n    })\r\n  }\r\n\r\n  return (\r\n    <div className=\"todo-item\">\r\n      <span>{todo.text}</span>\r\n      <div className=\"item-actions\">\r\n        <button \r\n          id={todo.id} \r\n          className=\"delete-button\" \r\n          onClick={(event) => deleteTodo(parseInt(event.target.id))}\r\n        ></button>\r\n        <input \r\n          className=\"\"\r\n          type=\"checkbox\" \r\n          checked={todo.done}\r\n          onChange={handleUpdate} \r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TodoItem;","import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport deleteTodoAction from '../actions/deleteTodoAction';\r\nimport addTodoAction from '../actions/addTodoAction';\r\nimport getTodosAction from '../actions/getTodosAction';\r\nimport updateTodoAction from '../actions/updateTodoAction';\r\nimport InputTodo from './InputTodo';\r\nimport TodoItem from './TodoItem';\r\n\r\nfunction TodoList({ todos, currentMaxId, addTodo, getTodos, deleteTodoById, updateTodo }) {\r\n  useEffect(getTodos, []);\r\n  return (\r\n    <div className=\"todolist\">\r\n      <div className=\"heading\">\r\n        TODOS\r\n      </div>\r\n\r\n      <InputTodo currentMaxId={currentMaxId} addTodo={addTodo} />\r\n      \r\n      <div className=\"details\">\r\n        {todos.map(todo =>\r\n          <TodoItem\r\n            key={todo.id}\r\n            id={todo.id}\r\n            todo={todo}\r\n            deleteTodo={deleteTodoById}\r\n            updateTodo={updateTodo}\r\n          />)\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    todos: state.todos,\r\n    currentMaxId: state.currentMaxId\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    getTodos: () => {dispatch(getTodosAction())},\r\n    deleteTodoById: (id) => {dispatch(deleteTodoAction(id))},\r\n    addTodo: (todo) => {dispatch(addTodoAction(todo))},\r\n    updateTodo: (todo) => {dispatch(updateTodoAction(todo))}\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoList);","export default function getTodosAction() {\r\n  return async (dispatch) => {\r\n    dispatch({type: 'GET_TODOS_START'});\r\n    let fetchResult = await fetch('/todos', {\r\n      headers: {'Content-Type': 'application/json'}\r\n    })\r\n    let data = await fetchResult.json();\r\n    dispatch({\r\n      type: 'GET_TODOS_SUCCESS',\r\n      data,\r\n      currentMaxId: Math.max(...data.map(todo => todo.id))\r\n    })\r\n  }\r\n}","export default function deleteTodoAction(id) {\r\n  return async (dispatch) => {\r\n    dispatch({type: 'DELETE_TODO_START'});\r\n    await fetch(`/todos/${id}`, {\r\n      method: 'DELETE',\r\n      headers: {'Content-Type': 'application/json'},\r\n    });\r\n    \r\n    dispatch({\r\n      type: 'DELETE_TODO_SUCCESS',\r\n      id\r\n    })\r\n  }\r\n}","export default function addTodoAction(newTodo) {\r\n  return async (dispatch) => {\r\n    dispatch({type: 'ADD_TODO_START'});\r\n    await fetch('/todos', {\r\n      method: 'POST',\r\n      headers: {'Content-Type': 'application/json'},\r\n      body: JSON.stringify(newTodo)\r\n    });\r\n    \r\n    dispatch({\r\n      type: 'ADD_TODO_SUCCESS',\r\n      newTodo\r\n    })\r\n  }\r\n}","export default function updateTodoAction(updateNeeded) {\r\n  return async (dispatch) => {\r\n    dispatch({type: 'UPDATE_TODO_START'});\r\n    await fetch(`/todos/${updateNeeded.id}`, {\r\n      method: 'PUT',\r\n      headers: {'Content-Type': 'application/json'},\r\n      body: JSON.stringify(updateNeeded)\r\n    });\r\n    dispatch({\r\n      type: 'UPDATE_TODO_SUCCESS',\r\n      updateNeeded\r\n    })\r\n  }\r\n}","import React from 'react';\nimport './App.css';\nimport TodoList from './components/TodoList';\n\nfunction App() {\n  return (\n    <TodoList/>\n  );\n}\n\nexport default App;\n","const initState = {\r\n  todos: [],\r\n  currentMaxId: 0,\r\n  updating: false\r\n}\r\n\r\nconst rootReducer = ( state = initState, action) => {\r\n  if(action.type === 'GET_TODOS_START') {\r\n    return {\r\n      ...state,\r\n      updating: true\r\n    }\r\n  }\r\n\r\n  if(action.type === 'GET_TODOS_SUCCESS'){\r\n    return {\r\n      ...state,\r\n      todos: [...action.data],\r\n      currentMaxId: action.currentMaxId,\r\n      updating: false\r\n    }\r\n  }\r\n\r\n  if(action.type === 'ADD_TODO_START'){\r\n    return {\r\n      ...state,\r\n      updating: true\r\n    }\r\n  }\r\n\r\n  if(action.type === 'ADD_TODO_SUCCESS'){\r\n    return {\r\n      todos: [...state.todos, action.newTodo],\r\n      updating: false,\r\n      currentMaxId: action.newTodo.id\r\n    }\r\n  }\r\n\r\n  if(action.type === 'UPDATE_TODO_START'){\r\n    return {\r\n      ...state,\r\n      updating: true\r\n    }\r\n  }\r\n\r\n  if(action.type === 'UPDATE_TODO_SUCCESS'){\r\n    let tempTodos = [...state.todos];\r\n    let {id, text, done} = action.updateNeeded;\r\n    \r\n    for(let todo of tempTodos) {\r\n      if(todo.id === id){\r\n        todo.text = text;\r\n        todo.done = done;\r\n      }\r\n    }\r\n\r\n    return {\r\n      ...state,\r\n      updating: false,\r\n      todos: [...tempTodos]\r\n    }\r\n  }\r\n\r\n  if(action.type === 'DELETE_TODO_START'){\r\n    return {\r\n      ...state,\r\n      updating: true\r\n    }\r\n  }\r\n\r\n  if(action.type === 'DELETE_TODO_SUCCESS'){\r\n    return {\r\n      ...state,\r\n      updating: false,\r\n      todos: state.todos.filter(todo => todo.id !== action.id)\r\n    }\r\n  }\r\n\r\n  return state;\r\n}\r\n\r\nexport default rootReducer;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { Provider } from 'react-redux';\r\nimport rootReducer from './reducers/rootReducer';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nReactDOM.render(<Provider store = {store}><App /></Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}